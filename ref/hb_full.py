# encoding: utf-8
"""This file includes necessary params, info."""
import mmcv
import os.path as osp

import numpy as np

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")
bop_root = osp.join(data_root, "BOP_DATASETS/")

# ---------------------------------------------------------------- #
# HB DATASET
# ---------------------------------------------------------------- #
dataset_root = osp.join(bop_root, "hb")
train_dir = osp.join(dataset_root, "train")
test_dir = osp.join(dataset_root, "test")
model_dir = osp.join(dataset_root, "models")
vertex_scale = 0.001
model_eval_dir = osp.join(dataset_root, "models_eval")

# object info
id2obj = {
    1: "01_bear",
    2: "02_benchvise",
    3: "03_round_car",
    4: "04_thin_cow",
    5: "05_fat_cow",
    6: "06_mug",
    7: "07_driller",
    8: "08_green_rabbit",
    9: "09_holepuncher",
    10: "10",
    11: "11",
    12: "12",
    13: "13",
    14: "14",
    15: "15",
    16: "16",
    17: "17",
    18: "18_jaffa_cakes_box",
    19: "19_minions",  # small yellow man
    20: "20_color_dog",
    21: "21_phone",
    22: "22_rhinoceros",  # xi niu
    23: "23_dog",
    24: "24",
    25: "25_car",
    26: "26_motorcycle",
    27: "27_high_heels",
    28: "28_stegosaurus",  # jian chi long
    29: "29_tea_box",
    30: "30_triceratops",  # san jiao long
    31: "31_toy_baby",
    32: "32_car",
    33: "33_yellow_rabbit",
}
objects = [str(obj) for obj in id2obj.values()]
obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

model_paths = [osp.join(model_dir, "obj_{:06d}.ply").format(_id) for _id in id2obj]
texture_paths = None
model_colors = [((i + 1) * 5, (i + 1) * 5, (i + 1) * 5) for i in range(obj_num)]  # for renderer

# yapf: disable
diameters = np.array([
    232.572, 257.407, 166.500, 179.029, 205.401,
    121.408, 263.718, 186.813, 166.572, 180.804,
    238.514, 156.887, 145.339, 243.733, 113.032,
    101.588, 132.771, 211.134, 185.582, 244.828,
    212.603, 190.203, 233.857, 252.263, 202.905,
    183.794, 264.442, 477.464, 198.004, 416.202,
    157.985, 201.759, 187.233
]) / 1000.0
# yapf: enable

# Camera info
width = 640
height = 480
zNear = 0.25
zFar = 6.0
center = (height / 2, width / 2)
camera_matrix = np.array([[537.4799, 0.0, 318.8965], [0.0, 536.1447, 238.3781], [0.0, 0.0, 1.0]])

depth_factor = 1000.0


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "models_info.json")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info


def get_fps_points():
    """key is str(obj_id) generated by
    core/gdrn_modeling/tools/hb/hb_1_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict


def get_keypoints_3d():
    """key is str(obj_id) generated by
    core/roi_pvnet/tools/hb/hb_1_compute_keypoints_3d.py."""
    keypoints_3d_path = osp.join(model_dir, "keypoints_3d.pkl")
    assert osp.exists(keypoints_3d_path), keypoints_3d_path
    kpts_dict = mmcv.load(keypoints_3d_path)
    return kpts_dict