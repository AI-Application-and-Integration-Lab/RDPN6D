# encoding: utf-8
"""This file includes necessary params, info."""
import os
import mmcv
import os.path as osp

import numpy as np

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")
bop_root = osp.join(data_root, "BOP_DATASETS/")

# ---------------------------------------------------------------- #
# LINEMOD DATASET
# ---------------------------------------------------------------- #
dataset_root = osp.join(bop_root, "delta")
train_dir = osp.join(dataset_root, "train")
test_dir = osp.join(dataset_root, "real")
model_dir = osp.join(dataset_root, "models")
vertex_scale = 0.001
model_eval_dir = osp.join(dataset_root, "models_eval")
# scaled models (.obj)
#model_scaled_dir = osp.join(dataset_root, "models_scaled")
#model_scaled_simple_dir = osp.join(dataset_root, "models_scaled_f5k")

#train_synt_blender_dir = osp.join(dataset_root, "lm_blender/")

# object info

id2obj = {
    1: "DC_drive",
    2: "DC_screwdriver",
    3: "Kilews",
    4: "CHASSIS_1300",
    5: "COVER_1300",
    6: "DELTA_IA-ROBOT",
    7: "Assemble",
    8: "CHASSIS_colored",
    9: "COVER_colored",
}
objects = [
   "DC_drive",
   "DC_screwdriver",
   "Kilews",
   "CHASSIS_1300",
   "COVER_1300",
   "DELTA_IA-ROBOT",
   "Assemble",
   "CHASSIS_colored",
   "COVER_colored",
]

obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

model_paths = [osp.join(model_dir, "obj_{:06d}.ply").format(_id) for _id in id2obj]
texture_paths = None
model_colors = [((i + 1) * 10, (i + 1) * 10, (i + 1) * 10) for i in range(obj_num)]  # for renderer

diameters = (
    np.array(
        [
            428.59,
            303.872,
            267.531,
            211.62,
            231.103,
            1207.6535,
            1355.130,
            297.136,
            231.103
        ]
    )
    * 1/ 1000.0
)

# diameters = (
#     np.array(
#         [
#             1000.59,
#             1000.872,
#             1000.531,
#             1000.62,
#             231.103,
#             1207.6535,
#             1355.130,
#             297.136,
#             231.103
#         ]
#     )
#     / 1000.0
# )
# Camera info
width = 640
height = 480
zNear = 0.25
zFar = 6.0
center = (height / 2, width / 2)

camera_matrix = np.array([[544.89227, 0, 311.66284], [0, 545.41659, 237.83059], [0, 0, 1]])


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "models_info.json")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info


def get_fps_points():
    """key is str(obj_id) generated by tools/lm/lmo_1_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict
