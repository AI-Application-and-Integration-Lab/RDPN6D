# encoding: utf-8
"""This file includes necessary params, info."""
import os
import mmcv
import os.path as osp

import numpy as np

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")
bop_root = osp.join(data_root, "BOP_DATASETS/")

# ---------------------------------------------------------------- #
# MP6D DATASET
# ---------------------------------------------------------------- #
dataset_root = osp.join(bop_root, "mp6d")

train_real_dir = osp.join(dataset_root, "data")
train_pbr_1_dir = osp.join(dataset_root, "data_syn_1")
train_pbr_2_dir = osp.join(dataset_root, "data_syn_2")

test_dir = osp.join(dataset_root, "data")


model_dir = osp.join(dataset_root, "models_cad")
fine_model_dir = osp.join(dataset_root, "models_fine")
model_eval_dir = osp.join(dataset_root, "models_cad")
model_scaled_simple_dir = osp.join(dataset_root, "models_rescaled")  # m, .obj
vertex_scale = 0.001

# object info
id2obj = {
    1: "obj_01",  # [1.3360, -0.5000, 3.5105]
    2: "obj_02",  # [0.5575, 1.7005, 4.8050]
    3: "obj_03",  # [-0.9520, 1.4670, 4.3645]
    4: "obj_04",  # [-0.0240, -1.5270, 8.4035]
    5: "obj_05",  # [1.2995, 2.4870, -11.8290]
    6: "obj_06",  # [-0.1565, 0.1150, 4.2625]
    7: "obj_07",  # [1.1645, -4.2015, 3.1190]
    8: "obj_08",  # [1.4460, -0.5915, 3.6085]
    9: "obj_09",  # [2.4195, 0.3075, 8.0715]
    10: "obj_10",  # [-18.6730, 12.1915, -1.4635]
    11: "obj_11",  # [5.3370, 5.8855, 25.6115]
    12: "obj_12",  # [4.9290, -2.4800, -13.2920]
    13: "obj_13",  # [-0.2270, 0.7950, -2.9675]
    14: "obj_14",  # [-8.4675, -0.6995, -1.6145]
    15: "obj_15",  # [9.0710, 20.9360, -2.1190]
    16: "obj_16",  # [1.4265, -2.5305, 17.1890]
    17: "obj_17",  # [7.0535, -28.1320, 0.0420]
    18: "obj_18",  # [0.0460, -2.1040, 0.3500]
    19: "obj_19",  # [10.5180, -1.9640, -0.4745]
    20: "obj_20",  # [-0.3950, -10.4130, 0.1620]
}
objects = list(id2obj.values())

obj_num = len(id2obj)
obj2id = {_name: _id for _id, _name in id2obj.items()}

model_paths = [osp.join(model_dir, "obj_{:02d}.ply").format(_id) for _id in id2obj]  # TODO: check this

# yapf: disable
diameters = np.array([110.729, 138.551, 64.319, 70.368, 78.980, 118.470, 117.605,112.676, 99.724, 78.401, 96.479, 90.00, 115.361, 109.368, 88.965, 74.81, 149.632, 147.263, 137.073, 130.390]) / 1000.0
# yapf: enable
# Camera info
width = 640
height = 480
zNear = 0.25
zFar = 6.0
center = (height / 2, width / 2)
# default: 0000~0059 and synt
camera_matrix = np.array([[567.53720406, 0. ,        312.66570357],
 [  0.,         569.36175922 ,257.1729701 ],
 [  0.,           0.,           1.        ]])

depth_factor = 1000


def get_models_info():
    """key is str(obj_id)"""
    models_info_path = osp.join(model_dir, "models_info.json")
    assert osp.exists(models_info_path), models_info_path
    models_info = mmcv.load(models_info_path)  # key is str(obj_id)
    return models_info


def get_fps_points():
    """key is str(obj_id) generated by
    core/gdrn_modeling/tools/ycbv/ycbv_1_compute_fps.py."""
    fps_points_path = osp.join(model_dir, "fps_points.pkl")
    assert osp.exists(fps_points_path), fps_points_path
    fps_dict = mmcv.load(fps_points_path)
    return fps_dict


def get_keypoints_3d():
    """key is str(obj_id) generated by
    core/roi_pvnet/tools/ycbv/ycbv_1_compute_keypoints_3d.py."""
    keypoints_3d_path = osp.join(model_dir, "keypoints_3d.pkl")
    assert osp.exists(keypoints_3d_path), keypoints_3d_path
    kpts_dict = mmcv.load(keypoints_3d_path)
    return kpts_dict
